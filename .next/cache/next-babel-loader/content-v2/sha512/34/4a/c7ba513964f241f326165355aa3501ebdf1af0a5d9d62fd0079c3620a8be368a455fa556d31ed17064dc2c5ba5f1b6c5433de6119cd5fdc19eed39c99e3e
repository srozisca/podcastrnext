{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Projetos\\\\NLW\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function playNext() {\n    var nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (nextEpisodeIndex < episodeList.length) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n\n    setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n  }\n\n  function playPrevious() {\n    var nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (nextEpisodeIndex < episodeList.length) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n\n    setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      isPlaying: isPlaying,\n      play: play,\n      playList: playList,\n      setPlayingState: setPlayingState,\n      togglePlay: togglePlay\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerContextProvider, \"LrQXJ4YCuKXOoMsmvRtpeyylJ9U=\");\n\n_c = PlayerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Projetos/NLW/podcastrnext/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","playList","list","index","togglePlay","setPlayingState","state","playNext","nextEpisodeIndex","length","playPrevious"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AAoBA,OAAO,IAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASG,qBAAT,OAAyE;AAAA;;AAAA,MAAxCC,QAAwC,QAAxCA,QAAwC;;AAAA,kBACtCH,QAAQ,CAAC,EAAD,CAD8B;AAAA,MACrEI,WADqE;AAAA,MACxDC,cADwD;;AAAA,mBAEtBL,QAAQ,CAAC,CAAD,CAFc;AAAA,MAErEM,mBAFqE;AAAA,MAEhDC,sBAFgD;;AAAA,mBAG1CP,QAAQ,CAAC,KAAD,CAHkC;AAAA,MAGrEQ,SAHqE;AAAA,MAG1DC,YAH0D;;AAK5E,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAC5BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAASG,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAC9CT,IAAAA,cAAc,CAACQ,IAAD,CAAd;AACAN,IAAAA,sBAAsB,CAACO,KAAD,CAAtB;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAASM,UAAT,GAAsB;AAClBN,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH;;AAED,WAASQ,eAAT,CAAyBC,KAAzB,EAAyC;AACrCR,IAAAA,YAAY,CAACQ,KAAD,CAAZ;AACH;;AAED,WAASC,QAAT,GAAoB;AAChB,QAAMC,gBAAgB,GAAGb,mBAAmB,GAAG,CAA/C;;AAEA,QAAIa,gBAAgB,GAAGf,WAAW,CAACgB,MAAnC,EAA2C;AACvCb,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;;AACDC,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;;AAED,WAASe,YAAT,GAAwB;AACpB,QAAMF,gBAAgB,GAAGb,mBAAmB,GAAG,CAA/C;;AAEA,QAAIa,gBAAgB,GAAGf,WAAW,CAACgB,MAAnC,EAA2C;AACvCb,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;;AACDC,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;;AAED,sBACI,QAAC,aAAD,CAAe,QAAf;AACI,IAAA,KAAK,EAAE;AACHF,MAAAA,WAAW,EAAXA,WADG;AAEHE,MAAAA,mBAAmB,EAAnBA,mBAFG;AAGHE,MAAAA,SAAS,EAATA,SAHG;AAIHE,MAAAA,IAAI,EAAJA,IAJG;AAKHE,MAAAA,QAAQ,EAARA,QALG;AAMHI,MAAAA,eAAe,EAAfA,eANG;AAOHD,MAAAA,UAAU,EAAVA;AAPG,KADX;AAAA,cAWKZ;AAXL;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GA1DeD,qB;;KAAAA,qB","sourcesContent":["import { createContext, ReactNode, useState } from \"react\";\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean\r\n    play: (episode: Episode) => void;\r\n    playList: (list: Episode[], index: number) => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    togglePlay: () => void;\r\n}\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n    function play(episode: Episode) {\r\n        setEpisodeList([episode]);\r\n        setCurrentEpisodeIndex(0);\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    function playList(list: Episode[], index: number) {\r\n        setEpisodeList(list);\r\n        setCurrentEpisodeIndex(index);\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    function togglePlay() {\r\n        setIsPlaying(!isPlaying);\r\n    }\r\n\r\n    function setPlayingState(state: boolean) {\r\n        setIsPlaying(state);\r\n    }\r\n\r\n    function playNext() {\r\n        const nextEpisodeIndex = currentEpisodeIndex + 1;\r\n\r\n        if (nextEpisodeIndex < episodeList.length) {\r\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n        }\r\n        setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n    }\r\n\r\n    function playPrevious() {\r\n        const nextEpisodeIndex = currentEpisodeIndex + 1;\r\n\r\n        if (nextEpisodeIndex < episodeList.length) {\r\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n        }\r\n        setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n    }\r\n\r\n    return (\r\n        <PlayerContext.Provider\r\n            value={{\r\n                episodeList,\r\n                currentEpisodeIndex,\r\n                isPlaying,\r\n                play,\r\n                playList,\r\n                setPlayingState,\r\n                togglePlay\r\n            }}\r\n        >\r\n            {children}\r\n        </PlayerContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}