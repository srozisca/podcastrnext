{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Projetos\\\\NLW\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContext.tsx\";\nimport { createContext, useContext, useState } from \"react\";\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const {\n    0: isShuffling,\n    1: setIsShuffling\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      isPlaying,\n      isLooping,\n      isShuffling,\n      play,\n      playList,\n      setPlayingState,\n      togglePlay,\n      toggleLoop,\n      toggleShuffle,\n      playNext,\n      playPrevious,\n      hasNext,\n      hasPrevious\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["C:/Projetos/NLW/podcastrnext/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","hasPrevious","hasNext","length","setPlayingState","state","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    isLooping: boolean;\r\n    isShuffling: boolean;\r\n    play: (episode: Episode) => void;\r\n    playList: (list: Episode[], index: number) => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    togglePlay: () => void;\r\n    toggleLoop: () => void;\r\n    toggleShuffle: () => void;\r\n    playNext: () => void;\r\n    playPrevious: () => void;\r\n    hasNext: boolean;\r\n    hasPrevious: boolean;\r\n\r\n}\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [isLooping, setIsLooping] = useState(false);\r\n    const [isShuffling, setIsShuffling] = useState(false);\r\n\r\n    function play(episode: Episode) {\r\n        setEpisodeList([episode]);\r\n        setCurrentEpisodeIndex(0);\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    function playList(list: Episode[], index: number) {\r\n        setEpisodeList(list);\r\n        setCurrentEpisodeIndex(index);\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    function togglePlay() {\r\n        setIsPlaying(!isPlaying);\r\n    }\r\n\r\n    function toggleLoop() {\r\n        setIsLooping(!isLooping);\r\n    }\r\n\r\n    function toggleShuffle() {\r\n        setIsShuffling(!isShuffling);\r\n    }\r\n\r\n    const hasPrevious = currentEpisodeIndex > 0;\r\n    const hasNext = isShuffling || (currentEpisodeIndex + 1 < episodeList.length);\r\n\r\n    function setPlayingState(state: boolean) {\r\n        setIsPlaying(state);\r\n    }\r\n\r\n    function playNext() {\r\n        if (isShuffling) {\r\n            const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length)\r\n            setCurrentEpisodeIndex(nextRandomEpisodeIndex);\r\n\r\n        } else if (hasNext) {\r\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n        }\r\n    }\r\n\r\n    function playPrevious() {\r\n        if (hasPrevious) {\r\n            setCurrentEpisodeIndex(currentEpisodeIndex - 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <PlayerContext.Provider\r\n            value={{\r\n                episodeList,\r\n                currentEpisodeIndex,\r\n                isPlaying,\r\n                isLooping,\r\n                isShuffling,\r\n                play,\r\n                playList,\r\n                setPlayingState,\r\n                togglePlay,\r\n                toggleLoop,\r\n                toggleShuffle,\r\n                playNext,\r\n                playPrevious,\r\n                hasNext,\r\n                hasPrevious\r\n            }}\r\n        >\r\n            {children}\r\n        </PlayerContext.Provider>\r\n    )\r\n}\r\n\r\nexport const usePlayer = () => {\r\n    return useContext(PlayerContext)\r\n}"]},"metadata":{},"sourceType":"module"}