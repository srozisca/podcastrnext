{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Projetos\\\\NLW\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n  var hasPrevious = currentEpisodeIndex > 0;\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      isPlaying: isPlaying,\n      play: play,\n      playList: playList,\n      setPlayingState: setPlayingState,\n      togglePlay: togglePlay,\n      toggleLoop: toggleLoop,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious,\n      isLooping: isLooping\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerContextProvider, \"3HvmxYPD5LZxO4zIQndWV+iMQ6k=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Projetos/NLW/podcastrnext/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","play","episode","playList","list","index","togglePlay","toggleLoop","hasNext","length","hasPrevious","setPlayingState","state","playNext","playPrevious","usePlayer"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AA2BA,OAAO,IAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASI,qBAAT,OAAyE;AAAA;;AAAA,MAAxCC,QAAwC,QAAxCA,QAAwC;;AAAA,kBACtCH,QAAQ,CAAC,EAAD,CAD8B;AAAA,MACrEI,WADqE;AAAA,MACxDC,cADwD;;AAAA,mBAEtBL,QAAQ,CAAC,CAAD,CAFc;AAAA,MAErEM,mBAFqE;AAAA,MAEhDC,sBAFgD;;AAAA,mBAG1CP,QAAQ,CAAC,KAAD,CAHkC;AAAA,MAGrEQ,SAHqE;AAAA,MAG1DC,YAH0D;;AAAA,mBAI1CT,QAAQ,CAAC,KAAD,CAJkC;AAAA,MAIrEU,SAJqE;AAAA,MAI1DC,YAJ0D;;AAM5E,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAC5BR,IAAAA,cAAc,CAAC,CAACQ,OAAD,CAAD,CAAd;AACAN,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAASK,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAC9CX,IAAAA,cAAc,CAACU,IAAD,CAAd;AACAR,IAAAA,sBAAsB,CAACS,KAAD,CAAtB;AACAP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAASQ,UAAT,GAAsB;AAClBR,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH;;AAED,WAASU,UAAT,GAAsB;AAClBP,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH;;AAED,MAAMS,OAAO,GAAGb,mBAAmB,GAAG,CAAtB,GAA0BF,WAAW,CAACgB,MAAtD;AACA,MAAMC,WAAW,GAAGf,mBAAmB,GAAG,CAA1C;;AAEA,WAASgB,eAAT,CAAyBC,KAAzB,EAAyC;AACrCd,IAAAA,YAAY,CAACc,KAAD,CAAZ;AACH;;AAED,WAASC,QAAT,GAAoB;AAChB,QAAIL,OAAJ,EAAa;AACTZ,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;AACJ;;AAED,WAASmB,YAAT,GAAwB;AACpB,QAAIJ,WAAJ,EAAiB;AACbd,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;AACJ;;AAED,sBACI,QAAC,aAAD,CAAe,QAAf;AACI,IAAA,KAAK,EAAE;AACHF,MAAAA,WAAW,EAAXA,WADG;AAEHE,MAAAA,mBAAmB,EAAnBA,mBAFG;AAGHE,MAAAA,SAAS,EAATA,SAHG;AAIHI,MAAAA,IAAI,EAAJA,IAJG;AAKHE,MAAAA,QAAQ,EAARA,QALG;AAMHQ,MAAAA,eAAe,EAAfA,eANG;AAOHL,MAAAA,UAAU,EAAVA,UAPG;AAQHC,MAAAA,UAAU,EAAVA,UARG;AASHM,MAAAA,QAAQ,EAARA,QATG;AAUHC,MAAAA,YAAY,EAAZA,YAVG;AAWHN,MAAAA,OAAO,EAAPA,OAXG;AAYHE,MAAAA,WAAW,EAAXA,WAZG;AAaHX,MAAAA,SAAS,EAATA;AAbG,KADX;AAAA,cAiBKP;AAjBL;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;;GAlEeD,qB;;KAAAA,qB;AAoEhB,OAAO,IAAMwB,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAC3B,SAAO3B,UAAU,CAACE,aAAD,CAAjB;AACH,CAFM;;IAAMyB,S","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    play: (episode: Episode) => void;\r\n    playList: (list: Episode[], index: number) => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    togglePlay: () => void;\r\n    toggleLoop: () => void;\r\n    playNext: () => void;\r\n    playPrevious: () => void;\r\n    hasNext: boolean;\r\n    hasPrevious: boolean;\r\n    isLooping: boolean;\r\n\r\n}\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [isLooping, setIsLooping] = useState(false);\r\n\r\n    function play(episode: Episode) {\r\n        setEpisodeList([episode]);\r\n        setCurrentEpisodeIndex(0);\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    function playList(list: Episode[], index: number) {\r\n        setEpisodeList(list);\r\n        setCurrentEpisodeIndex(index);\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    function togglePlay() {\r\n        setIsPlaying(!isPlaying);\r\n    }\r\n\r\n    function toggleLoop() {\r\n        setIsLooping(!isLooping);\r\n    }\r\n\r\n    const hasNext = currentEpisodeIndex + 1 < episodeList.length;\r\n    const hasPrevious = currentEpisodeIndex > 0;\r\n\r\n    function setPlayingState(state: boolean) {\r\n        setIsPlaying(state);\r\n    }\r\n\r\n    function playNext() {\r\n        if (hasNext) {\r\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n        }\r\n    }\r\n\r\n    function playPrevious() {\r\n        if (hasPrevious) {\r\n            setCurrentEpisodeIndex(currentEpisodeIndex - 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <PlayerContext.Provider\r\n            value={{\r\n                episodeList,\r\n                currentEpisodeIndex,\r\n                isPlaying,\r\n                play,\r\n                playList,\r\n                setPlayingState,\r\n                togglePlay,\r\n                toggleLoop,\r\n                playNext,\r\n                playPrevious,\r\n                hasNext,\r\n                hasPrevious,\r\n                isLooping\r\n            }}\r\n        >\r\n            {children}\r\n        </PlayerContext.Provider>\r\n    )\r\n}\r\n\r\nexport const usePlayer = () => {\r\n    return useContext(PlayerContext)\r\n}"]},"metadata":{},"sourceType":"module"}